type Query {
  solid(id: Int): Solid!
}

# NOTE: follow https://www.apollographql.com/blog/designing-graphql-mutations-e09de826ed97/ best practices.
# type Mutation {

# }

type Solid{
  id: Int
  faces: [Face]!
  edges: [Edge]!
  vertex: [Vertex]!
  nextSo: Solid!
  prevSo: Solid!
}

type Face {
  id: Int
  fSolid: Face!
  flout: [Loop]!
  floops: [Loop]!
  feq: Vertex
  nextF: Face!
  prevF: Face!
}

type Loop {
  lecG: HalfEdge!
  lFace: Face!
  nextL: Loop!
  prevL: Loop!
}

type Edge {
  he1: HalfEdge!
  he2: HalfEdge!
  nextE: Edge!
  prevE: Edge!
}

type HalfEdge{
  edg: Edge!
  vtx: Vertex!
  wloop: Loop
  nxt: Edge!
  prevs: Edge!
}

type Vertex {
  id: Int
  vedge: HalfEdge!
  nextv: Vertex!
  prevv: Vertex!
}

type Node {
  solid: Solid
  face: Face
  loop: Loop
  halfEdge: HalfEdge
  vertex: Vertex
  edge: Edge
}